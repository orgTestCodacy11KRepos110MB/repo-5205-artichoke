window.SIDEBAR_ITEMS = {"fn":[["interpreter","Create and initialize an [`Artichoke`] interpreter."],["interpreter_with_config","Create and initialize an [`Artichoke`] interpreter with build metadata."]],"macro":[["mrb_get_args","Extract `sys::mrb_value`s from a `sys::mrb_state` to adapt a C entry point to a Rust implementation of a Ruby function."],["unwrap_interpreter","Extract an `Artichoke` instance from the userdata on a `sys::mrb_state`."]],"mod":[["block",""],["class",""],["convert",""],["core","A “prelude” for users of the `artichoke-core` crate."],["def",""],["error","Error types for Ruby exceptions and unwinding support."],["exception_handler",""],["extn",""],["ffi","Functions for interacting directly with mruby structs from [`sys`]."],["fmt","Utilities for interfacing [`std::fmt`] with Artichoke’s exception types."],["gc",""],["load_path","Virtual file system."],["method",""],["module",""],["prelude","A “prelude” for users of the `artichoke-backend` crate."],["release_metadata","Information about an Artichoke build."],["state",""],["sys","Rust bindings for mruby, customized for Artichoke."],["types",""],["value","Boxed values on the Ruby interpreter heap."]],"struct":[["Artichoke","Interpreter instance."],["Guard","Interpreter guard that prepares an [`Artichoke`] to re-enter an FFI boundary."]]};